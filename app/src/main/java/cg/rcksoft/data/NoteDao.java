package cg.rcksoft.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table NOTE. Update with new column
 */
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    public NoteDao(DaoConfig config) {
        super(config);
    }

    ;


    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'DESCRIPTION' TEXT," + // 2: description
                "'DATE_EDIT_NOTE' INTEGER," + // 3: dateEditNote
                "'FLAG_FAVORITE' TEXT," + // 4: flagFavorite
                "'DATE_ALARM' TEXT," + // 5: dateAlarm
                "'HEUR_ALARM' TEXT);"); // 6: heurAlarm
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }

        java.util.Date dateEditNote = entity.getDateEditNote();
        if (dateEditNote != null) {
            stmt.bindLong(4, dateEditNote.getTime());
        }

        String flagFavorite = entity.getFlagFavorite();
        if (title != null) {
            stmt.bindString(5, flagFavorite);
        }

        String dateAlarm = entity.getDateAlarm();
        if (description != null) {
            stmt.bindString(6, dateAlarm);
        }

        String heurAlarm = entity.getHeurAlarm();
        if (description != null) {
            stmt.bindString(7, heurAlarm);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
                cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // dateEditNote
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // flagFavorite
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dateAlarm
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // heurAlarm
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDateEditNote(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setFlagFavorite(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDateAlarm(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHeurAlarm(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Note entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property DateEditNote = new Property(3, java.util.Date.class, "dateEditNote", false, "DATE_EDIT_NOTE");
        public final static Property FlagFavorite = new Property(4, String.class, "flagFavorite", false, "FLAG_FAVORITE");
        public final static Property DateAlarm = new Property(5, String.class, "dateAlarm", false, "DATE_ALARM");
        public final static Property HeurAlarm = new Property(6, String.class, "heurAlarm", false, "HEUR_ALARM");
    }

}
