package cg.rcksoft.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EVENT.
*/
public class EventDao extends AbstractDao<Event, Long> {

    public static final String TABLENAME = "EVENT";

    /**
     * Properties of entity Event.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Events = new Property(1, String.class, "events", false, "EVENTS");
        public final static Property DateEditEvent = new Property(2, java.util.Date.class, "dateEditEvent", false, "DATE_EDIT_EVENT");
        public final static Property DateAlertEvent = new Property(3, java.util.Date.class, "dateAlertEvent", false, "DATE_ALERT_EVENT");
        public final static Property HeureAlertEvent = new Property(4, java.util.Date.class, "heureAlertEvent", false, "HEURE_ALERT_EVENT");
    };


    public EventDao(DaoConfig config) {
        super(config);
    }
    
    public EventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EVENT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'EVENTS' TEXT," + // 1: events
                "'DATE_EDIT_EVENT' INTEGER," + // 2: dateEditEvent
                "'DATE_ALERT_EVENT' INTEGER," + // 3: dateAlertEvent
                "'HEURE_ALERT_EVENT' INTEGER);"); // 4: heureAlertEvent
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EVENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Event entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String events = entity.getEvents();
        if (events != null) {
            stmt.bindString(2, events);
        }
 
        java.util.Date dateEditEvent = entity.getDateEditEvent();
        if (dateEditEvent != null) {
            stmt.bindLong(3, dateEditEvent.getTime());
        }
 
        java.util.Date dateAlertEvent = entity.getDateAlertEvent();
        if (dateAlertEvent != null) {
            stmt.bindLong(4, dateAlertEvent.getTime());
        }
 
        java.util.Date heureAlertEvent = entity.getHeureAlertEvent();
        if (heureAlertEvent != null) {
            stmt.bindLong(5, heureAlertEvent.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Event readEntity(Cursor cursor, int offset) {
        Event entity = new Event( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // events
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // dateEditEvent
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // dateAlertEvent
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // heureAlertEvent
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Event entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEvents(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDateEditEvent(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDateAlertEvent(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setHeureAlertEvent(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Event entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Event entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
